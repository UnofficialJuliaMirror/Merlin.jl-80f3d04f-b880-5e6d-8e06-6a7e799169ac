{
    "docs": [
        {
            "location": "/", 
            "text": "Merlin.jl\n\n\nMerlin\n is a deep learning framework written in \nJulia\n. It aims to provide a fast, flexible and compact deep learning library for machine learning.\n\n\nSee README.md for basic usage.", 
            "title": "Home"
        }, 
        {
            "location": "/#merlinjl", 
            "text": "Merlin  is a deep learning framework written in  Julia . It aims to provide a fast, flexible and compact deep learning library for machine learning.  See README.md for basic usage.", 
            "title": "Merlin.jl"
        }, 
        {
            "location": "/functions/", 
            "text": "Functions\n\n\n#\n\n\nMerlin.relu\n \n \nMethod\n.\n\n\nrelu(x::Var)\n\n\n\n\n\nRectifier liner unit.\n\n\n\ud83d\udc49 Example\n\n\nx\n \n=\n \nVar\n(\nrand\n(\nFloat32\n,\n10\n,\n5\n))\n\n\ny\n \n=\n \nrelu\n(\nx\n)\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMerlin.sigmoid\n \n \nMethod\n.\n\n\nsigmoid(x::Var)\n\n\n\n\n\nsource\n\n\n#\n\n\nBase.tanh\n \n \nMethod\n.\n\n\ntanh(x::Var)\n\n\n\n\n\nsource\n\n\n#\n\n\nMerlin.concat\n \n \nMethod\n.\n\n\nconcat(dim::Int, xs::Var...)\nconcat(dim::Int, xs::Vector{Var})\n\n\n\n\n\nConcatenate arrays along the given dimension.\n\n\n\ud83d\udc49 Example\n\n\nx1\n \n=\n \nVar\n(\nrand\n(\nFloat32\n,\n7\n,\n5\n))\n\n\nx2\n \n=\n \nVar\n(\nrand\n(\nFloat32\n,\n10\n,\n5\n))\n\n\ny\n \n=\n \nconcat\n(\n1\n,\n \nx1\n,\n \nx2\n)\n\n\n\n\n\n\nsource\n\n\n#\n\n\nMerlin.crossentropy\n \n \nMethod\n.\n\n\ncrossentropy(p::Var, q::Var)\n\n\n\n\n\nCompute cross-entropy between two distributions $p$ and $q$, where $p$ is usually correct labels and $q$ is predicted values.\n\n\n\n\n\nf(p,q)=-\u2211_{x} p_{x} \\log q_{x}\n\n\n\n\n\nArguments\n\n\n\n\n$p$: variable of \nVector{Int}\n or \nMatrix{Float}\n. $p$ must be normalized.\n\n\n$q$: variable of \nMatrix{Float}\n.\n\n\n\n\n\ud83d\udc49 Example\n\n\np\n \n=\n \nVar\n([\n1\n:\n5\n;])\n\n\nq\n \n=\n \nVar\n(\nrand\n(\nFloat32\n,\n10\n,\n5\n))\n\n\ny\n \n=\n \ncrossentropy\n(\np\n,\n \nq\n)\n\n\n\n\n\n\nsource", 
            "title": "Functions"
        }, 
        {
            "location": "/functions/#functions", 
            "text": "#  Merlin.relu     Method .  relu(x::Var)  Rectifier liner unit.  \ud83d\udc49 Example  x   =   Var ( rand ( Float32 , 10 , 5 ))  y   =   relu ( x )   source  #  Merlin.sigmoid     Method .  sigmoid(x::Var)  source  #  Base.tanh     Method .  tanh(x::Var)  source  #  Merlin.concat     Method .  concat(dim::Int, xs::Var...)\nconcat(dim::Int, xs::Vector{Var})  Concatenate arrays along the given dimension.  \ud83d\udc49 Example  x1   =   Var ( rand ( Float32 , 7 , 5 ))  x2   =   Var ( rand ( Float32 , 10 , 5 ))  y   =   concat ( 1 ,   x1 ,   x2 )   source  #  Merlin.crossentropy     Method .  crossentropy(p::Var, q::Var)  Compute cross-entropy between two distributions $p$ and $q$, where $p$ is usually correct labels and $q$ is predicted values.   \nf(p,q)=-\u2211_{x} p_{x} \\log q_{x}   Arguments   $p$: variable of  Vector{Int}  or  Matrix{Float} . $p$ must be normalized.  $q$: variable of  Matrix{Float} .   \ud83d\udc49 Example  p   =   Var ([ 1 : 5 ;])  q   =   Var ( rand ( Float32 , 10 , 5 ))  y   =   crossentropy ( p ,   q )   source", 
            "title": "Functions"
        }, 
        {
            "location": "/graph/", 
            "text": "", 
            "title": "Graph"
        }, 
        {
            "location": "/optimizers/", 
            "text": "Optimizers\n\n\n#\n\n\nMerlin.SGD\n \n \nType\n.\n\n\nStochastic Gradient Descent.\n\n\nsource", 
            "title": "Optimizers"
        }, 
        {
            "location": "/optimizers/#optimizers", 
            "text": "#  Merlin.SGD     Type .  Stochastic Gradient Descent.  source", 
            "title": "Optimizers"
        }
    ]
}