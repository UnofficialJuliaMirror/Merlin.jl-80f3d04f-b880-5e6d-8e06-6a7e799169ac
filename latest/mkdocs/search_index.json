{
    "docs": [
        {
            "location": "/", 
            "text": "Merlin.jl\n\n\nMerlin.jl\n is a neural network library in \nJulia\n.\n\n\n\n\nFunctions\n\n\n\n\nOverview\n\n\nDecoding\n\n\nTraining\n\n\n\n\n\n\nTypes\n\n\n\u2605 Variable\n\n\n\u2605 Functor\n\n\n\n\n\n\nFunctors\n\n\n\ud83d\udd28 Concat\n\n\n\n\n\n\n\n\nIt aims to provide a fast, flexible and concise neural network library for machine learning.\n\n\n\n\nInstall\n\n\n#julia\n Pkg.clone(\nhttps://github.com/hshindo/Merlin.jl.git\n)\n\n\n\n\n\n\n\n\nOptional Requirements\n\n\n\n\ncuDNN\n v4 (for CUDA GPU)", 
            "title": "Home"
        }, 
        {
            "location": "/#merlinjl", 
            "text": "Merlin.jl  is a neural network library in  Julia .", 
            "title": "Merlin.jl"
        }, 
        {
            "location": "/#functions", 
            "text": "Overview  Decoding  Training    Types  \u2605 Variable  \u2605 Functor    Functors  \ud83d\udd28 Concat     It aims to provide a fast, flexible and concise neural network library for machine learning.", 
            "title": "Functions"
        }, 
        {
            "location": "/#install", 
            "text": "#julia  Pkg.clone( https://github.com/hshindo/Merlin.jl.git )", 
            "title": "Install"
        }, 
        {
            "location": "/#optional-requirements", 
            "text": "cuDNN  v4 (for CUDA GPU)", 
            "title": "Optional Requirements"
        }, 
        {
            "location": "/overview/", 
            "text": "Overview\n\n\nMerlin.jl provides many primitive functions.\n\n\nEvery computation is preserved.\n\n\n\n\nDecoding\n\n\nv\n \n=\n \nVariable\n()\n\n\n\n\n\n\n\n\nTraining\n\n\nopt\n \n=\n \nSGD\n(\n0.001\n)\n\n\n\nfor\n \ni\n \n=\n \n1\n:\n10\n\n  \nv\n \n=\n \nVariable\n()\n\n  \ny\n \n=\n \nv\n \n|\n \nf1\n \n|\n \nf2\n\n  \ny\n.\ngrad\n \n=\n \nones\n()\n\n  \nbackward!\n(\ny\n)\n\n  \nupdate!\n(\nopt\n,\n \ny\n)\n\n\nend", 
            "title": "Overview"
        }, 
        {
            "location": "/overview/#overview", 
            "text": "Merlin.jl provides many primitive functions.  Every computation is preserved.", 
            "title": "Overview"
        }, 
        {
            "location": "/overview/#decoding", 
            "text": "v   =   Variable ()", 
            "title": "Decoding"
        }, 
        {
            "location": "/overview/#training", 
            "text": "opt   =   SGD ( 0.001 )  for   i   =   1 : 10 \n   v   =   Variable () \n   y   =   v   |   f1   |   f2 \n   y . grad   =   ones () \n   backward! ( y ) \n   update! ( opt ,   y )  end", 
            "title": "Training"
        }, 
        {
            "location": "/types/", 
            "text": "Types\n\n\nThere are three basic types:\n\n\n\n\nVariable\n\n\nFunctor\n\n\nOptimizer\n\n\n\n\n\n\n\u2605 Variable\n\n\nVariable\n has \nvalue\n and \ngrad\n.\n\n\nx\n \n=\n \nVariable\n(\nAFArray\n(\nFloat32\n,\n10\n,\n5\n))\n\n\nx\n.\nvalue\n\n\nx\n.\ngrad\n\n\n\n\n\n\n\n\n\u2605 Functor\n\n\nFunctor\n is an abstract type of functors.", 
            "title": "Types"
        }, 
        {
            "location": "/types/#types", 
            "text": "There are three basic types:   Variable  Functor  Optimizer", 
            "title": "Types"
        }, 
        {
            "location": "/types/#variable", 
            "text": "Variable  has  value  and  grad .  x   =   Variable ( AFArray ( Float32 , 10 , 5 ))  x . value  x . grad", 
            "title": "\u2605 Variable"
        }, 
        {
            "location": "/types/#functor", 
            "text": "Functor  is an abstract type of functors.", 
            "title": "\u2605 Functor"
        }
    ]
}