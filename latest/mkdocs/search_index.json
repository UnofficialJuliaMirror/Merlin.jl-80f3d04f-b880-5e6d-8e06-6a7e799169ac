{
    "docs": [
        {
            "location": "/", 
            "text": "Merlin.jl\n\n\nMerlin\n is a deep learning framework written in \nJulia\n. It aims to provide a fast, flexible and compact deep learning library for machine learning.\n\n\nSee README.md for basic usage.\n\n\nMerlin\n provides some primitive functions (\nfunctor\ns). See \nFunctor\n for more information about each functors.", 
            "title": "Home"
        }, 
        {
            "location": "/#merlinjl", 
            "text": "Merlin  is a deep learning framework written in  Julia . It aims to provide a fast, flexible and compact deep learning library for machine learning.  See README.md for basic usage.  Merlin  provides some primitive functions ( functor s). See  Functor  for more information about each functors.", 
            "title": "Merlin.jl"
        }, 
        {
            "location": "/functors/", 
            "text": "Functors\n\n\nFunctor\n is an abstract type of function object. Every \nFunctor\n implements forward and backward computation. The following are concrete types of \nFunctor\ns.\n\n\n{docs}\nConcat\nCrossEntropy\nLinear\nLogSoftmax\nLookup\nMax\nReLU\nReshape\nSigmoid\nSoftmax\nTanh\nWindow2D", 
            "title": "Functors"
        }, 
        {
            "location": "/functors/#functors", 
            "text": "Functor  is an abstract type of function object. Every  Functor  implements forward and backward computation. The following are concrete types of  Functor s.  {docs}\nConcat\nCrossEntropy\nLinear\nLogSoftmax\nLookup\nMax\nReLU\nReshape\nSigmoid\nSoftmax\nTanh\nWindow2D", 
            "title": "Functors"
        }, 
        {
            "location": "/network/", 
            "text": "#\n\n\nMerlin.Network\n \n \nType\n.\n\n\nNetwork\n\n\nNetwork\n is a container of \nFunctor\ns.\n\n\n\ud83d\udc49 Example\n\n\n\n\n\n\n\n\nsource", 
            "title": "Network"
        }, 
        {
            "location": "/network/#network", 
            "text": "Network  is a container of  Functor s.", 
            "title": "Network"
        }, 
        {
            "location": "/network/#example", 
            "text": "source", 
            "title": "\ud83d\udc49 Example"
        }, 
        {
            "location": "/optimizers/", 
            "text": "Optimizers\n\n\n#\n\n\nMerlin.SGD\n \n \nType\n.\n\n\nSGD\n\n\nComputes Stochastic Gradient Descent. After updated, gradient is set to be zero.\n\n\nFunctions\n\n\n\n\nSGD(rate::Float64)\n\n\n\n\n\ud83d\udc49 Example\n\n\nopt\n \n=\n \nSGD\n(\n0.001\n)\n\n\nf\n \n=\n \nLinear\n(\nFloat32\n,\n100\n,\n50\n)\n\n\n# compute gradient...\n\n\n\nupdate!\n(\nopt\n,\n \nf\n)\n \n# update parameters of `f`\n\n\nupdate!\n(\nopt\n,\n \nparam\n,\n \ngrad\n)\n \n# param -= rate * grad\n\n\n\n\n\n\nsource", 
            "title": "Optimizers"
        }, 
        {
            "location": "/optimizers/#optimizers", 
            "text": "#  Merlin.SGD     Type .", 
            "title": "Optimizers"
        }, 
        {
            "location": "/optimizers/#sgd", 
            "text": "Computes Stochastic Gradient Descent. After updated, gradient is set to be zero.", 
            "title": "SGD"
        }, 
        {
            "location": "/optimizers/#functions", 
            "text": "SGD(rate::Float64)", 
            "title": "Functions"
        }, 
        {
            "location": "/optimizers/#example", 
            "text": "opt   =   SGD ( 0.001 )  f   =   Linear ( Float32 , 100 , 50 )  # compute gradient...  update! ( opt ,   f )   # update parameters of `f`  update! ( opt ,   param ,   grad )   # param -= rate * grad   source", 
            "title": "\ud83d\udc49 Example"
        }
    ]
}