{
    "docs": [
        {
            "location": "/", 
            "text": "Merlin.jl\n\n\nMerlin.jl\n is a neural network library in \nJulia\n.\n\n\nIt aims to provide a fast, flexible and concise neural network library for machine learning.\n\n\n\n\nInstall\n\n\n#julia\n Pkg.clone(\nhttps://github.com/hshindo/Merlin.jl.git\n)\n\n\n\n\n\n\n\n\nRequirements for CUDA GPU\n\n\n\n\ncuDNN\n v4", 
            "title": "Home"
        }, 
        {
            "location": "/#merlinjl", 
            "text": "Merlin.jl  is a neural network library in  Julia .  It aims to provide a fast, flexible and concise neural network library for machine learning.", 
            "title": "Merlin.jl"
        }, 
        {
            "location": "/#install", 
            "text": "#julia  Pkg.clone( https://github.com/hshindo/Merlin.jl.git )", 
            "title": "Install"
        }, 
        {
            "location": "/#requirements-for-cuda-gpu", 
            "text": "cuDNN  v4", 
            "title": "Requirements for CUDA GPU"
        }, 
        {
            "location": "/overview/", 
            "text": "Overview\n\n\nMerlin.jl provides many primitive functions.\n\n\n\n\nDecoding\n\n\n\n\nCreate \nVariable\n from \nArray\n (CPU) or \nCudaArray\n (CUDA GPU).\n\n\nCreate \nFunctor\ns.\n\n\nApply the functors to the variable.\n\n\n\n\nusing\n \nMerlin\n\n\n\nx\n \n=\n \nVariable\n(\nrand\n(\nFloat32\n,\n50\n,\n5\n))\n\n\nf\n \n=\n \nLinear\n(\nFloat32\n,\n50\n,\n30\n)\n\n\ny\n \n=\n \nf\n(\nx\n)\n\n\n\n\n\n\n\n\nTraining\n\n\n\n\nCreate \nOptimizer\n.\n\n\nDecode your variables.\n\n\nCompute gradient.\n\n\nUpdate \nFunctor\ns with your \nOptimizer\n.\n\n\n\n\nusing\n \nMerlin\n\n\n\nopt\n \n=\n \nSGD\n(\n0.001\n)\n\n\nf\n \n=\n \n[\nLinear\n(\nFloat32\n,\n50\n,\n30\n),\n \nReLU\n(),\n \nLinear\n(\nFloat32\n,\n30\n,\n10\n)]\n\n\n\nfor\n \ni\n \n=\n \n1\n:\n10\n\n  \nx\n \n=\n \nVariable\n(\nrand\n(\nFloat32\n,\n50\n,\n20\n))\n\n  \ny\n \n=\n \nf\n(\nx\n)\n \n|\n \nCrossEntropy\n(\n...\n)\n\n  \ngradient!\n(\ny\n)\n\n  \nupdate!\n(\nopt\n,\n \nf\n)\n\n\nend", 
            "title": "Overview"
        }, 
        {
            "location": "/overview/#overview", 
            "text": "Merlin.jl provides many primitive functions.", 
            "title": "Overview"
        }, 
        {
            "location": "/overview/#decoding", 
            "text": "Create  Variable  from  Array  (CPU) or  CudaArray  (CUDA GPU).  Create  Functor s.  Apply the functors to the variable.   using   Merlin  x   =   Variable ( rand ( Float32 , 50 , 5 ))  f   =   Linear ( Float32 , 50 , 30 )  y   =   f ( x )", 
            "title": "Decoding"
        }, 
        {
            "location": "/overview/#training", 
            "text": "Create  Optimizer .  Decode your variables.  Compute gradient.  Update  Functor s with your  Optimizer .   using   Merlin  opt   =   SGD ( 0.001 )  f   =   [ Linear ( Float32 , 50 , 30 ),   ReLU (),   Linear ( Float32 , 30 , 10 )]  for   i   =   1 : 10 \n   x   =   Variable ( rand ( Float32 , 50 , 20 )) \n   y   =   f ( x )   |   CrossEntropy ( ... ) \n   gradient! ( y ) \n   update! ( opt ,   f )  end", 
            "title": "Training"
        }, 
        {
            "location": "/types/", 
            "text": "Types\n\n\nThere are three basic types:\n\n\n\n\nVariable\n\n\nFunctor\n\n\nOptimizer\n\n\n\n\n\n\nVariable\n\n\nVariable\n has \nvalue\n and \ngrad\n.\n\n\n#x = Variable(AFArray(Float32,10,5))\n\n\n#x.value\n\n\n#x.grad\n\n\n\n\n\n\n\n\nFunctor\n\n\nFunctor\n is an abstract type of functors.", 
            "title": "Types"
        }, 
        {
            "location": "/types/#types", 
            "text": "There are three basic types:   Variable  Functor  Optimizer", 
            "title": "Types"
        }, 
        {
            "location": "/types/#variable", 
            "text": "Variable  has  value  and  grad .  #x = Variable(AFArray(Float32,10,5))  #x.value  #x.grad", 
            "title": "Variable"
        }, 
        {
            "location": "/types/#functor", 
            "text": "Functor  is an abstract type of functors.", 
            "title": "Functor"
        }, 
        {
            "location": "/functors/", 
            "text": "Functors\n\n\n#\n\n\nMerlin.Concat\n \n \nType\n.\n\n\n\n\nConcat\n\n\nConcatenates arrays along the given dimension.\n\n\nFunctions\n\n\n\n\nConcat(dim::Int)\n\n\n\n\n\ud83d\udc49 Example\n\n\nx1\n \n=\n \nVariable\n(\nrand\n(\nFloat32\n,\n7\n,\n5\n))\n\n\nx2\n \n=\n \nVariable\n(\nrand\n(\nFloat32\n,\n10\n,\n5\n))\n\n\nf\n \n=\n \nConcat\n(\n1\n)\n\n\ny\n \n=\n \nf\n(\nx1\n,\n \nx2\n)\n \n# or y = f([x1,x2])\n\n\n\n\n\n\n#\n\n\nMerlin.CrossEntropy\n \n \nType\n.\n\n\n\n\nCrossEntropy\n\n\nComputes cross-entropy between a true distribution $p$ and the target distribution $q$.\n\n\n:\\\n[ f(x; p) = -sum_{x} p log q_x ] $\n\n\n$ f(x; p) = -sum_{x} p log q_x $\n\n\nFunctions\n\n\n\n\nCrossEntropy(p::Matrix)\n\n\nCrossEntropy(p::Vector{Int})\n\n\n\n\n\ud83d\udc49 Example\n\n\np\n \n=\n \nVariable\n([\n1\n:\n10\n])\n\n\nf\n \n=\n \nCrossEntropy\n(\np\n)\n\n\nx\n \n=\n \nVariable\n(\nrand\n(\nFloat32\n,\n50\n,\n10\n))\n\n\ny\n \n=\n \nf\n(\nx\n)\n\n\n\n\n\n\n#\n\n\nMerlin.Linear\n \n \nType\n.\n\n\n\n\nLinear\n\n\nComputes linear transformation a.k.a. affine transformation.\n\n\n$ f(x) = W^{mathrm{T}}x + b $\n\n\nwhere $W$ is a weight matrix, $b$ is a bias vector.\n\n\n\n\nFunctions\n\n\n\n\nLinear(w, b)\n\n\nLinear{T}(::Type{T}, insize::Int, outsize::Int)\n\n\n\n\n\ud83d\udc49 Example\n\n\nx\n \n=\n \nVariable\n(\nrand\n(\nFloat32\n,\n10\n,\n5\n))\n\n\nf\n \n=\n \nLinear\n(\nFloat32\n,\n \n10\n,\n \n3\n)\n\n\ny\n \n=\n \nf\n(\nx\n)\n\n\n\n\n\n\n#\n\n\nMerlin.LogSoftmax\n \n \nType\n.\n\n\n\n\nLogSoftmax\n\n\n$ f(x)=\frac{\u001bxp(x_{i})}{sum_{j}^{n}\u001bxp(x_{j})},;i=1,ldots,n $\n\n\nFunctions\n\n\n\n\nLogSoftmax()\n\n\n\n\n\ud83d\udc49 Example\n\n\nx\n \n=\n \nVariable\n(\nrand\n(\nFloat32\n,\n10\n,\n5\n))\n\n\nf\n \n=\n \nLogSoftmax\n()\n\n\ny\n \n=\n \nf\n(\nx\n)\n\n\n\n\n\n\n#\n\n\nMerlin.Lookup\n \n \nType\n.\n\n\n\n\nLookup\n\n\nLookup variables.\n\n\nFunctions\n\n\n\n\nLookup(insize::Int, outsize::Int)\n\n\n\n\n\ud83d\udc49 Example\n\n\nx\n \n=\n \nVariable\n([\n1\n:\n5\n])\n\n\nf\n \n=\n \nLookup\n(\nFloat32\n,\n10000\n,\n100\n)\n\n\ny\n \n=\n \nf\n(\nx\n)\n\n\n\n\n\n\n#\n\n\nMerlin.Lookup\n \n \nMethod\n.\n\n\n\n\n\n\nT: Type\n\n\ninsize::Int\n\n\noutsize::Int\n\n\n\n\n#\n\n\nMerlin.Max\n \n \nType\n.\n\n\n\n\nMax\n\n\nComputes the maximum value of an array over the given dimensions.\n\n\nFunctions\n\n\n\n\nMax(dim::Int)\n\n\n\n\n\ud83d\udc49 Example\n\n\nx\n \n=\n \nVariable\n(\nrand\n(\nFloat32\n,\n10\n,\n5\n))\n\n\nf\n \n=\n \nMax\n(\n1\n)\n\n\ny\n \n=\n \nf\n(\nx\n)\n\n\n\n\n\n\n#\n\n\nMerlin.ReLU\n \n \nType\n.\n\n\n\n\nReLU\n\n\nRectifier linear unit.\n\n\n\n\nReLU()\n\n\n\n\n\ud83d\udc49 Example\n\n\nx\n \n=\n \nVariable\n(\nrand\n(\nFloat32\n,\n10\n,\n5\n))\n\n\nf\n \n=\n \nReLU\n()\n\n\ny\n \n=\n \nf\n(\nx\n)\n\n\n\n\n\n\n#\n\n\nMerlin.Reshape\n \n \nType\n.\n\n\n\n\nReshape\n\n\nReshapes an array with the given dimensions.\n\n\nFunctions\n\n\n\n\nReshape(dims::Int...)\n\n\n\n\n\ud83d\udc49 Example\n\n\nx\n \n=\n \nVariable\n(\nrand\n(\nFloat32\n,\n10\n,\n5\n,\n3\n))\n\n\nf\n \n=\n \nReshape\n(\n5\n,\n3\n,\n10\n)\n\n\ny\n \n=\n \nf\n(\nx\n)\n\n\n\n\n\n\n#\n\n\nMerlin.Tanh\n \n \nType\n.\n\n\n\n\nTanh\n\n\n\n\nTanh()\n\n\n\n\n\ud83d\udc49 Example\n\n\nx\n \n=\n \nVariable\n(\nrand\n(\nFloat32\n,\n10\n,\n5\n))\n\n\nf\n \n=\n \nTanh\n()\n\n\ny\n \n=\n \nf\n(\nx\n)\n\n\n\n\n\n\n#\n\n\nMerlin.Window2D\n \n \nType\n.\n\n\n\n\nWindow2D\n\n\n\n\nWindow(w1::Int, w2::Int, s1::Int, s2::Int, p1::Int, p2::Int)\n     - w1, w2: window sizes     - s1, s2: stride sizes     - p1, p2: padding sizes\n\n\n\n\n\ud83d\udc49 Example\n\n\n#x = Variable(rand(Float32,10,5))\n\n\n#f = Window2D(10, 2, 1, 1, 0, 0)\n\n\n#y = f(x)", 
            "title": "Functors"
        }, 
        {
            "location": "/functors/#functors", 
            "text": "#  Merlin.Concat     Type .", 
            "title": "Functors"
        }, 
        {
            "location": "/functors/#concat", 
            "text": "Concatenates arrays along the given dimension.", 
            "title": "Concat"
        }, 
        {
            "location": "/functors/#functions", 
            "text": "Concat(dim::Int)", 
            "title": "Functions"
        }, 
        {
            "location": "/functors/#example", 
            "text": "x1   =   Variable ( rand ( Float32 , 7 , 5 ))  x2   =   Variable ( rand ( Float32 , 10 , 5 ))  f   =   Concat ( 1 )  y   =   f ( x1 ,   x2 )   # or y = f([x1,x2])   #  Merlin.CrossEntropy     Type .", 
            "title": "\ud83d\udc49 Example"
        }, 
        {
            "location": "/functors/#crossentropy", 
            "text": "Computes cross-entropy between a true distribution $p$ and the target distribution $q$.  :\\\n[ f(x; p) = -sum_{x} p log q_x ] $  $ f(x; p) = -sum_{x} p log q_x $", 
            "title": "CrossEntropy"
        }, 
        {
            "location": "/functors/#functions_1", 
            "text": "CrossEntropy(p::Matrix)  CrossEntropy(p::Vector{Int})", 
            "title": "Functions"
        }, 
        {
            "location": "/functors/#example_1", 
            "text": "p   =   Variable ([ 1 : 10 ])  f   =   CrossEntropy ( p )  x   =   Variable ( rand ( Float32 , 50 , 10 ))  y   =   f ( x )   #  Merlin.Linear     Type .", 
            "title": "\ud83d\udc49 Example"
        }, 
        {
            "location": "/functors/#linear", 
            "text": "Computes linear transformation a.k.a. affine transformation.  $ f(x) = W^{mathrm{T}}x + b $  where $W$ is a weight matrix, $b$ is a bias vector.", 
            "title": "Linear"
        }, 
        {
            "location": "/functors/#functions_2", 
            "text": "Linear(w, b)  Linear{T}(::Type{T}, insize::Int, outsize::Int)", 
            "title": "Functions"
        }, 
        {
            "location": "/functors/#example_2", 
            "text": "x   =   Variable ( rand ( Float32 , 10 , 5 ))  f   =   Linear ( Float32 ,   10 ,   3 )  y   =   f ( x )   #  Merlin.LogSoftmax     Type .", 
            "title": "\ud83d\udc49 Example"
        }, 
        {
            "location": "/functors/#logsoftmax", 
            "text": "$ f(x)=\frac{\u001bxp(x_{i})}{sum_{j}^{n}\u001bxp(x_{j})},;i=1,ldots,n $", 
            "title": "LogSoftmax"
        }, 
        {
            "location": "/functors/#functions_3", 
            "text": "LogSoftmax()", 
            "title": "Functions"
        }, 
        {
            "location": "/functors/#example_3", 
            "text": "x   =   Variable ( rand ( Float32 , 10 , 5 ))  f   =   LogSoftmax ()  y   =   f ( x )   #  Merlin.Lookup     Type .", 
            "title": "\ud83d\udc49 Example"
        }, 
        {
            "location": "/functors/#lookup", 
            "text": "Lookup variables.", 
            "title": "Lookup"
        }, 
        {
            "location": "/functors/#functions_4", 
            "text": "Lookup(insize::Int, outsize::Int)", 
            "title": "Functions"
        }, 
        {
            "location": "/functors/#example_4", 
            "text": "x   =   Variable ([ 1 : 5 ])  f   =   Lookup ( Float32 , 10000 , 100 )  y   =   f ( x )   #  Merlin.Lookup     Method .    T: Type  insize::Int  outsize::Int   #  Merlin.Max     Type .", 
            "title": "\ud83d\udc49 Example"
        }, 
        {
            "location": "/functors/#max", 
            "text": "Computes the maximum value of an array over the given dimensions.", 
            "title": "Max"
        }, 
        {
            "location": "/functors/#functions_5", 
            "text": "Max(dim::Int)", 
            "title": "Functions"
        }, 
        {
            "location": "/functors/#example_5", 
            "text": "x   =   Variable ( rand ( Float32 , 10 , 5 ))  f   =   Max ( 1 )  y   =   f ( x )   #  Merlin.ReLU     Type .", 
            "title": "\ud83d\udc49 Example"
        }, 
        {
            "location": "/functors/#relu", 
            "text": "Rectifier linear unit.   ReLU()", 
            "title": "ReLU"
        }, 
        {
            "location": "/functors/#example_6", 
            "text": "x   =   Variable ( rand ( Float32 , 10 , 5 ))  f   =   ReLU ()  y   =   f ( x )   #  Merlin.Reshape     Type .", 
            "title": "\ud83d\udc49 Example"
        }, 
        {
            "location": "/functors/#reshape", 
            "text": "Reshapes an array with the given dimensions.", 
            "title": "Reshape"
        }, 
        {
            "location": "/functors/#functions_6", 
            "text": "Reshape(dims::Int...)", 
            "title": "Functions"
        }, 
        {
            "location": "/functors/#example_7", 
            "text": "x   =   Variable ( rand ( Float32 , 10 , 5 , 3 ))  f   =   Reshape ( 5 , 3 , 10 )  y   =   f ( x )   #  Merlin.Tanh     Type .", 
            "title": "\ud83d\udc49 Example"
        }, 
        {
            "location": "/functors/#tanh", 
            "text": "Tanh()", 
            "title": "Tanh"
        }, 
        {
            "location": "/functors/#example_8", 
            "text": "x   =   Variable ( rand ( Float32 , 10 , 5 ))  f   =   Tanh ()  y   =   f ( x )   #  Merlin.Window2D     Type .", 
            "title": "\ud83d\udc49 Example"
        }, 
        {
            "location": "/functors/#window2d", 
            "text": "Window(w1::Int, w2::Int, s1::Int, s2::Int, p1::Int, p2::Int)      - w1, w2: window sizes     - s1, s2: stride sizes     - p1, p2: padding sizes", 
            "title": "Window2D"
        }, 
        {
            "location": "/functors/#example_9", 
            "text": "#x = Variable(rand(Float32,10,5))  #f = Window2D(10, 2, 1, 1, 0, 0)  #y = f(x)", 
            "title": "\ud83d\udc49 Example"
        }, 
        {
            "location": "/optimizers/", 
            "text": "Optimizers\n\n\n#\n\n\nMerlin.AdaGrad\n \n \nType\n.\n\n\n\n\nAdaGrad\n\n\nAdaGrad implementation. See: http://jmlr.org/papers/v12/duchi11a.html\n\n\n#\n\n\nMerlin.Adam\n \n \nType\n.\n\n\n\n\nAdam\n\n\nAdam: A Method for Stochastic Optimization See: http://arxiv.org/abs/1412.6980v8\n\n\n#\n\n\nMerlin.SGD\n \n \nType\n.\n\n\n\n\nSGD\n\n\nStochastic Gradient Descent.\n\n\n\ud83d\udc49 Example", 
            "title": "Optimizers"
        }, 
        {
            "location": "/optimizers/#optimizers", 
            "text": "#  Merlin.AdaGrad     Type .", 
            "title": "Optimizers"
        }, 
        {
            "location": "/optimizers/#adagrad", 
            "text": "AdaGrad implementation. See: http://jmlr.org/papers/v12/duchi11a.html  #  Merlin.Adam     Type .", 
            "title": "AdaGrad"
        }, 
        {
            "location": "/optimizers/#adam", 
            "text": "Adam: A Method for Stochastic Optimization See: http://arxiv.org/abs/1412.6980v8  #  Merlin.SGD     Type .", 
            "title": "Adam"
        }, 
        {
            "location": "/optimizers/#sgd", 
            "text": "Stochastic Gradient Descent.", 
            "title": "SGD"
        }, 
        {
            "location": "/optimizers/#example", 
            "text": "", 
            "title": "\ud83d\udc49 Example"
        }
    ]
}